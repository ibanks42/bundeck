name: Release Build

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  build-linux-windows:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"

      - name: Install dependencies
        run: |
          go get .

      - name: Set up Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Build Web Assets
        run: |
          cd web
          bun install
          bun run build
          cd ..

      # Clean any previous artifacts
      - name: Clean
        run: make clean

      # Build Linux binaries
      - name: Build Linux (amd64)
        run: GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags "-s -w" -o bundeck-linux-amd64 .

      - name: Build Linux (arm64)
        run: GOOS=linux GOARCH=arm64 CGO_ENABLED=0 go build -ldflags "-s -w" -o bundeck-linux-arm64 .

      # Build Windows binaries
      - name: Build Windows (amd64)
        run: GOOS=windows GOARCH=amd64 CGO_ENABLED=0 go build -ldflags "-H=windowsgui -s -w" -o bundeck-windows-amd64.exe .

      - name: Build Windows (arm64)
        run: GOOS=windows GOARCH=arm64 CGO_ENABLED=0 go build -ldflags "-H=windowsgui -s -w" -o bundeck-windows-arm64.exe .

      # Upload artifacts for release job
      - name: Upload Linux/Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-windows-artifacts
          path: |
            bundeck-linux-amd64
            bundeck-linux-arm64
            bundeck-windows-amd64.exe
            bundeck-windows-arm64.exe

  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"

      - name: Install dependencies
        run: |
          go get .

      - name: Set up Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Build Web Assets
        run: |
          cd web
          bun install
          bun run build
          cd ..

      # Build macOS app bundles
      - name: Build macOS App Bundles
        run: make build-macos-apple

      # Code sign app bundle
      - name: Codesign app bundle
        env:
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
          MACOS_CERTIFICATE_NAME: ${{ secrets.MACOS_CERTIFICATE_NAME }}
          MACOS_CI_KEYCHAIN_PWD: ${{ secrets.MACOS_CI_KEYCHAIN_PWD }}
        run: |
          # Create entitlements file
          cat > entitlements.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>com.apple.security.cs.allow-jit</key>
              <true/>
              <key>com.apple.security.cs.allow-unsigned-executable-memory</key>
              <true/>
              <key>com.apple.security.cs.disable-library-validation</key>
              <true/>
              <key>com.apple.security.cs.disable-executable-page-protection</key>
              <true/>
              <key>com.apple.security.cs.allow-dyld-environment-variables</key>
              <true/>
          </dict>
          </plist>
          EOF

          # Turn our base64-encoded certificate back to a regular .p12 file
          echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12

          # Create a keychain for the certificates
          security create-keychain -p "$MACOS_CI_KEYCHAIN_PWD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$MACOS_CI_KEYCHAIN_PWD" build.keychain
          security import certificate.p12 -k build.keychain -P "$MACOS_CERTIFICATE_PWD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$MACOS_CI_KEYCHAIN_PWD" build.keychain

          # Verify certificate is available
          security find-identity -v -p codesigning build.keychain

          # Sign the binaries inside the app bundle first
          echo "Signing binaries..."
          /usr/bin/codesign --force -o runtime \
              --sign "$MACOS_CERTIFICATE_NAME" \
              --entitlements entitlements.plist \
              --timestamp \
              --verbose ./dist/BunDeck.app/Contents/MacOS/BunDeck-bin

          /usr/bin/codesign --force -o runtime \
              --sign "$MACOS_CERTIFICATE_NAME" \
              --entitlements entitlements.plist \
              --timestamp \
              --verbose ./dist/BunDeck.app/Contents/MacOS/BunDeck

          # Sign the entire app bundle
          echo "Signing app bundle..."
          /usr/bin/codesign --force --deep -o runtime \
              --sign "$MACOS_CERTIFICATE_NAME" \
              --entitlements entitlements.plist \
              --timestamp \
              --verbose ./dist/BunDeck.app

          # Verify signatures
          codesign -dv --verbose=4 ./dist/BunDeck.app
          codesign --verify --deep --strict --verbose=2 ./dist/BunDeck.app

      # Notarize the app bundle
      - name: Notarize app bundle
        env:
          MACOS_NOTARIZATION_APPLE_ID: ${{ secrets.MACOS_NOTARIZATION_APPLE_ID }}
          MACOS_NOTARIZATION_TEAM_ID: ${{ secrets.MACOS_NOTARIZATION_TEAM_ID }}
          MACOS_NOTARIZATION_PWD: ${{ secrets.MACOS_NOTARIZATION_PWD }}
        run: |
          # Create a zip for notarization
          ditto -c -k --keepParent ./dist/BunDeck.app ./BunDeck.zip

          # Store notarization credentials
          xcrun notarytool store-credentials "notarytool-profile" \
            --apple-id "$MACOS_NOTARIZATION_APPLE_ID" \
            --team-id "$MACOS_NOTARIZATION_TEAM_ID" \
            --password "$MACOS_NOTARIZATION_PWD"

          # Submit for notarization and capture output
          NOTARIZATION_OUTPUT=$(xcrun notarytool submit ./BunDeck.zip \
            --keychain-profile "notarytool-profile" \
            --wait)
          
          echo "$NOTARIZATION_OUTPUT"
          
          # Extract submission ID for logs
          SUBMISSION_ID=$(echo "$NOTARIZATION_OUTPUT" | grep "id:" | head -1 | awk '{print $2}')
          echo "Notarization Submission ID: $SUBMISSION_ID"
          
          # Get detailed log
          if [[ -n "$SUBMISSION_ID" ]]; then
            echo "Notarization Log:"
            xcrun notarytool log "$SUBMISSION_ID" --keychain-profile "notarytool-profile"
            
            # Check if notarization was successful
            if echo "$NOTARIZATION_OUTPUT" | grep -q "status: Accepted"; then
              echo "Notarization successful, stapling ticket..."
              
              # Staple the notarization to the app
              xcrun stapler staple ./dist/BunDeck.app
              xcrun stapler validate ./dist/BunDeck.app
              
              # Re-zip for distribution
              ditto -c -k --keepParent ./dist/BunDeck.app ./BunDeck-notarized.zip
              mv ./BunDeck-notarized.zip ./BunDeck-macOS-apple.zip
            else
              echo "Notarization failed!"
              exit 1
            fi
          else
            echo "Failed to get submission ID"
            exit 1
          fi

      # Upload artifacts for release job
      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-artifacts
          path: |
            BunDeck-macOS-apple.zip

  create-release:
    needs: [build-linux-windows, build-macos]
    runs-on: ubuntu-latest
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Prepare release files
        run: |
          mkdir release-files
          cp ./artifacts/linux-windows-artifacts/* release-files/
          cp ./artifacts/macos-artifacts/* release-files/
          ls -la release-files/

      # Create release with all built artifacts
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release-files/bundeck-linux-amd64
            release-files/bundeck-linux-arm64
            release-files/bundeck-windows-amd64.exe
            release-files/bundeck-windows-arm64.exe
            release-files/BunDeck-macOS-apple.zip
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
